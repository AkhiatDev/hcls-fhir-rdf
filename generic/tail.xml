
<xsl:template match="/">
    <!-- <xsl:text># generated </xsl:text><xsl:value-of select="$now"/><xsl:text>&#10;&#10;</xsl:text> -->
    <xsl:apply-templates select="*" mode="root"/>
</xsl:template>

<xsl:template match="atom:feed" mode="root">
    <xsl:text>@prefix atom: &lt;http://www.w3.org/2005/Atom&gt; .&#10;</xsl:text>
    <xsl:call-template name="addPrefixes">
        <xsl:with-param name="name" select="name(//atom:content/*[1])"/>
    </xsl:call-template>
    <xsl:apply-templates select="*" mode="atomFeed"/>
    <xsl:text>.&#10;</xsl:text>
    <xsl:for-each select="atom:entry">
	<xsl:text>&lt;</xsl:text>
	<xsl:value-of select="atom:id/text()"/>
	<xsl:text>&gt; a atom:entry ;&#10;</xsl:text>
	<xsl:apply-templates select="*" mode="atomEntry"/>
	<xsl:text>.&#10;</xsl:text>
    </xsl:for-each>
    <xsl:for-each select="atom:entry/atom:content/*">
	<xsl:call-template name="ResourceRoot">
	    <xsl:with-param name="subject" select="concat('&lt;', ../../atom:link/@href , '&gt;')"/>
	    <xsl:with-param name="doc" select="../../atom:link/@href"/>
	</xsl:call-template>
    </xsl:for-each>
</xsl:template>

<xsl:template match="atom:id" mode="atomFeed">
    <xsl:text>&lt;</xsl:text>
    <xsl:value-of select="text()"/>
    <xsl:text>&gt; a atom:Feed ;&#10;</xsl:text>
    <xsl:apply-templates select="*" mode="atomEntry"/>
</xsl:template>

<xsl:template match="atom:link" mode="atomFeed">
    <xsl:text>    atom:link &lt;</xsl:text> <!-- @@ need dc: prefix -->
    <xsl:value-of select="@href"/> <!-- @@ need escape -->
    <xsl:text>&gt; ;&#10;</xsl:text>
</xsl:template>

<xsl:template match="atom:entry" mode="atomFeed">
    <xsl:text>    atom:entry &lt;</xsl:text>
    <xsl:value-of select="atom:id/text()"/>
    <xsl:text>&gt; ;&#10;</xsl:text>
</xsl:template>

<xsl:template match="atom:title" mode="atomEntry">
    <xsl:text>    dc:title "</xsl:text> <!-- @@ need dc: prefix -->
    <xsl:value-of select="text()"/> <!-- @@ need escape -->
    <xsl:text>" ;&#10;</xsl:text>
</xsl:template>

<xsl:template match="atom:id" mode="atomEntry">
</xsl:template>

<xsl:template match="atom:link" mode="atomEntry">
    <xsl:text>    atom:link &lt;</xsl:text> <!-- @@ need dc: prefix -->
    <xsl:value-of select="@href"/> <!-- @@ need escape -->
    <xsl:text>&gt; ;&#10;</xsl:text>
</xsl:template>

<xsl:template match="atom:updated" mode="atomEntry">
    <xsl:text>    atom:updated "</xsl:text> <!-- @@ need dc: prefix -->
    <xsl:value-of select="text()"/> <!-- @@ need escape -->
    <xsl:text>"^^xsd:dateTime ;&#10;</xsl:text>
</xsl:template>

<xsl:template match="atom:author" mode="atomEntry">
    <xsl:text>    dc:author "</xsl:text> <!-- @@ need dc: prefix -->
    <xsl:value-of select="atom:name/text()"/> <!-- @@ need escape -->
    <xsl:text>" ;&#10;</xsl:text>
</xsl:template>

<xsl:template match="atom:content" mode="atomEntry">
</xsl:template>

<xsl:template match="atom:summary" mode="atomEntry">
    <xsl:text>    atom:summary """</xsl:text>
    <xsl:for-each select="*">
	<xsl:call-template name="copy-element" />
    </xsl:for-each>
    <xsl:text>""";&#10;</xsl:text>
</xsl:template>

<xsl:template match="*" mode="root">
    <xsl:call-template name="addPrefixes">
        <xsl:with-param name="name" select="name(.)"/>
    </xsl:call-template>
    <xsl:text>@base &lt;http://this-fhir-server/fhir/&gt; .&#10;</xsl:text>
    <xsl:call-template name="ResourceRoot">
        <xsl:with-param name="subject" select="concat('&lt;', $docParam, '&gt;')"/>
	<xsl:with-param name="doc" select="$docParam"/>
    </xsl:call-template>
</xsl:template>

<!-- We'll traverse the FHIR instance XML data ($this param) while
     simultanously hopping around a build-in XML structure describing
     each FHIR path and its associated types + sub-propeties ($context param)
     We kick things off from the XML root element... -->
<xsl:template name="ResourceRoot">
    <xsl:param name="subject"/>
    <xsl:param name="doc"/>
    <xsl:call-template name="FhirElement">
        <xsl:with-param name="depth" select="0"/>
        <xsl:with-param name="this" select="."/>
        <xsl:with-param name="context" select="name()"/>
        <xsl:with-param name="subject" select="$subject"/>
	<xsl:with-param name="doc" select="$doc"/>
    </xsl:call-template>
    <xsl:if test="$contained = 'ref'">
      <!-- Reference contained elements by id -->
      <xsl:for-each select=".//f:contained/*">
        <xsl:call-template name="FhirElement">
          <xsl:with-param name="depth" select="0"/>
          <xsl:with-param name="this" select="."/>
          <xsl:with-param name="context" select="name()"/>
          <xsl:with-param name="subject" select="concat('&lt;', $doc, '#', f:id/@value, '&gt;')"/>
	        <xsl:with-param name="doc" select="$doc"/>
        </xsl:call-template>
      </xsl:for-each>
    </xsl:if>

    <xsl:if test="$reference = 'ref'">
    <xsl:for-each select=".//f:reference[../f:display]">
	<xsl:value-of select="concat('&lt;', @value, '&gt;')"/>
	<xsl:text> fhir:Reference.display </xsl:text>
  <xsl:call-template name="LeafNode">
    <xsl:with-param name="value" select="concat('&quot;', ../f:display/@value, '&quot;')"/>
  </xsl:call-template>
	<xsl:text> .&#10;</xsl:text>
    </xsl:for-each>
    </xsl:if>
    <!-- @@ delme if the above rule is sufficient.
    <xsl:variable name="root" select="."/>
    <xsl:for-each select="document('')/*/l:fhirdefs/path/type[text()='Resource']/../fhir_path/text()">
      <xsl:if test=".='Other.subject'">
        <xsl:for-each select="$root/../f:Other/f:subject">

        <xsl:call-template name="FhirElement">
            <xsl:with-param name="depth" select="0"/>
            <xsl:with-param name="this" select="."/>
            <xsl:with-param name="context" select="name()"/>
            <xsl:with-param name="subject" select="concat('&lt;#', f:reference/@value, '&gt; ')"/>
	    <xsl:with-param name="doc" select="$doc"/>
        </xsl:call-template>

        </xsl:for-each>
      </xsl:if>
    </xsl:for-each>
    -->
    <!--     [[<xsl:value-of select="name(//*)"/>]] -->
    <!-- {{<xsl:value-of select="name($root)"/>}} -->
</xsl:template>

<!-- This should be relaced with something less verbose to call -->
<xsl:template name="FhirIndent">
    <xsl:param name="depth" />
    <xsl:text>   </xsl:text>
    <xsl:if test="$depth > 0">
        <xsl:call-template name="FhirIndent">
            <xsl:with-param name="depth" select="number($depth)-1"/>
        </xsl:call-template>
    </xsl:if>
</xsl:template>

<!-- called with any f:extension elements anywhere, anytime, you name it, buddy.
change
      from:                                    to:
  <modifierExtension>                     <http://...plus> [
    <url value="http://...plus"/>            a fhir:modified_integer;
    <valueInteger value="2"/>                <http://...times> [
    <modifierExtension>                         a fhir:modified_integer;
      <url value="http://...times"/>            fhir:value "5";
      <valueInteger value="5"/>              ];
    </modifierExtension>                     fhir:modifiedBy <http://...times>;
  </modifierExtension>                       fhir:value "2";
                                          ];
                                          fhir:modifiedBy <http://...plus>;
 -->
<xsl:template name="extension">
    <xsl:param name="depth"/>
    <xsl:param name="this"/>
    <xsl:param name="doc"/>

    <!-- <http://...plus> [ -->
    <xsl:call-template name="FhirIndent"> <xsl:with-param name="depth" select="$depth+1"/> </xsl:call-template>
    <xsl:text>&lt;</xsl:text><xsl:value-of select="f:url/@value"/><xsl:text>&gt; [</xsl:text>
    <xsl:if test="not(*[substring(name(), 1, 5)='value'])"><!-- ugh, why do i need this? -->
	<xsl:text>&#10;</xsl:text>
    </xsl:if>

    <!-- find the (one) value element, e.g. f:valueInteger -->
    <xsl:for-each select="*[substring(name(), 1, 5)='value']">

	<!-- change 'f:valueInteger' into 'integer' -->
	<xsl:variable name="type1" select="substring(name(), 6)"/>
	<xsl:variable name="type">
	    <xsl:choose> <!-- Fix cases in narrow minority of supported type names.-->
		<xsl:when test="$type1='Integer'"     ><xsl:value-of select="'integer'"     /></xsl:when>
		<xsl:when test="$type1='Decimal'"     ><xsl:value-of select="'decimal'"     /></xsl:when>
		<xsl:when test="$type1='DateTime'"    ><xsl:value-of select="'dateTime'"    /></xsl:when>
		<xsl:when test="$type1='Date'"        ><xsl:value-of select="'date'"        /></xsl:when>
		<xsl:when test="$type1='Instant'"     ><xsl:value-of select="'instant'"     /></xsl:when>
		<xsl:when test="$type1='String'"      ><xsl:value-of select="'string'"      /></xsl:when>
		<xsl:when test="$type1='Uri'"         ><xsl:value-of select="'uri'"         /></xsl:when>
		<xsl:when test="$type1='Boolean'"     ><xsl:value-of select="'boolean'"     /></xsl:when>
		<xsl:when test="$type1='Code'"        ><xsl:value-of select="'code'"        /></xsl:when>
		<xsl:when test="$type1='Base64Binary'"><xsl:value-of select="'base64Binary'"/></xsl:when>
		<xsl:otherwise><xsl:value-of select="$type1"/></xsl:otherwise>
	    </xsl:choose>
	</xsl:variable>

	<!-- Chatty translation of 6th char to lowercase: -->
	<!-- <xsl:variable name="type" select="concat(translate(substring(name(), 6, 1), -->
	<!--                                                       'ABCDEFGHIJKLMNOPQRSTUVWXYZ', -->
	<!--                                                       'abcdefghijklmnopqrstuvwxyz'), -->
	<!--                                             substring(name(), 7))"/> -->

	<xsl:call-template name="FhirElement">
	    <xsl:with-param name="depth" select="$depth+1"/>
	    <xsl:with-param name="this" select="."/>
	    <xsl:with-param name="context" select="$type"/>
	    <xsl:with-param name="doc" select="$doc"/>
	</xsl:call-template>
    </xsl:for-each>

    <!-- or find the n extensions -->
    <xsl:for-each select="f:extension|f:modifierExtension">
	<xsl:call-template name="extension">
	    <xsl:with-param name="depth" select="$depth+1"/>
	    <xsl:with-param name="this" select="."/>
	    <xsl:with-param name="doc" select="$doc"/>
	</xsl:call-template>
    </xsl:for-each>

    <!-- ]; -->
    <xsl:call-template name="FhirIndent"> <xsl:with-param name="depth" select="$depth+1"/> </xsl:call-template>
    <xsl:text>];&#10;</xsl:text>

    <xsl:if test="name(.)='modifierExtension'">
	<!-- fhir:modifiedBy <http://...plus>; -->
	<xsl:call-template name="FhirIndent"> <xsl:with-param name="depth" select="$depth+1"/> </xsl:call-template>
	<xsl:value-of select="'fhir:modifiedBy '"/>
	<xsl:text>&lt;</xsl:text><xsl:value-of select="f:url/@value"/><xsl:text>&gt;;&#10;</xsl:text>
    </xsl:if>
</xsl:template>

<xsl:template name="FhirElement">

    <!-- mainly just indentation bookkeeping -->
    <xsl:param name="depth" />

    <!-- where we are in the FHIR instance XML payload -->
    <xsl:param name="this" />

    <!-- path into the accompanying FHIR definitions (built in to this XSLT) -->
    <xsl:param name="context" />

    <xsl:param name="subject" />
    <xsl:param name="doc" />

    <!-- XSLT makes meta-programming a drag.  But here, we look up the relevant node in our FHIR 
         definitions, keying off of the $context param (which is a fhir_path value) --> 
    <xsl:variable name="def" select="document('')/*/l:fhirdefs/path/fhir_path[text()=$context]/.."/>

    <!-- Type of the current element. Type can be null (for internal nodes) -->
    <xsl:variable name="def.type" select="$def/type"/>

    <!-- Sub-elemenets that are defined for this type.  Each sub includes 
           * an xpath fragment (e.g. 'f:detail')
           * FHIR path (e.g. Order.detail)
           * target type (e.g. CodeableConcept; or blank if the target is an internal node)
         (Resource) sub-elements of type Extension are handled separately.
         Properties appear to have no sub-elements for Extensions. -->
    <xsl:variable name="def.subs" select="$def/subs/sub[type!='Extension']"/>

    <xsl:choose>
        <!-- TODO possibly handlers for (some) datatyes: e.g. text-->

        <!-- This first branch represents a leaf node for which no further properties are defined in FHIR Spreadsheets -->
        <xsl:when test="not($def) or $def/fhir_path = 'Reference'">

            <xsl:text>&#10;</xsl:text>
            <xsl:if test="$context!='Reference'"> <!-- @@ $reference = 'ref' and ? -->
                <xsl:call-template name="FhirIndent"> <xsl:with-param name="depth" select="1+$depth"/> </xsl:call-template>
                <xsl:text>a fhir:</xsl:text>
                <xsl:if test="name(..)='modifierExtension'">
                    <xsl:text>modifying_</xsl:text> <!-- a modifying_integer -->
                </xsl:if>
                <xsl:value-of select="$context"/>
                <xsl:text>;&#10;</xsl:text>
            </xsl:if>
            <xsl:for-each select="../f:extension|../f:modifierExtension">
		<xsl:call-template name="extension">
		    <xsl:with-param name="depth" select="$depth"/>
		    <xsl:with-param name="this" select="."/>
		    <xsl:with-param name="doc" select="$doc"/>
		</xsl:call-template>
            </xsl:for-each>             
            <xsl:if test="$context = 'Reference'"> <!--  or $context = 'resource'" --> <!-- @@ $reference = 'ref' and ? -->
                <xsl:call-template name="FhirIndent"> <xsl:with-param name="depth" select="1+$depth"/> </xsl:call-template>
                <xsl:text>a fhir:</xsl:text>
                <xsl:value-of select="$this/f:type/@value"/>
                <xsl:text>Reference;&#10;</xsl:text>
                <xsl:call-template name="FhirIndent"> <xsl:with-param name="depth" select="1+$depth"/> </xsl:call-template>
                <xsl:text>fhir:Reference.reference &lt;</xsl:text>
                <xsl:value-of select="$this/f:reference/@value"/>
                <xsl:text>&gt;;&#10;</xsl:text>
                <xsl:if test="$this/f:display/@value">
                    <xsl:call-template name="FhirIndent"> <xsl:with-param name="depth" select="1+$depth"/> </xsl:call-template>
                    <xsl:text>fhir:Reference.display </xsl:text>
                    <xsl:call-template name="LeafNode">
                      <xsl:with-param name="value" select="concat('&quot;', $this/f:display/@value, '&quot;')"/>
                    </xsl:call-template>
                    <xsl:text>&#10;</xsl:text>
                </xsl:if>
            </xsl:if>

            <xsl:if test="$this/@value">
                <xsl:call-template name="FhirIndent"> <xsl:with-param name="depth" select="1+$depth"/> </xsl:call-template>
                <xsl:text>fhir:value </xsl:text>
                <xsl:call-template name="LeafNodeEOL">
                  <xsl:with-param name="value" select="concat('&quot;', $this/@value, '&quot;')"/>
                </xsl:call-template>
            </xsl:if>
            <xsl:if test="$context='xhtml'">
                <xsl:call-template name="FhirIndent"> <xsl:with-param name="depth" select="1+$depth"/> </xsl:call-template>
                <xsl:variable name="xml">
                  <xsl:for-each select="$this">
                    <xsl:call-template name="copy-element" />
                  </xsl:for-each>
                </xsl:variable>
                <xsl:text>fhir:text </xsl:text>
                <xsl:call-template name="LeafNodeEOL">
                  <xsl:with-param name="value" select="concat('&quot;&quot;&quot;', $xml, '&quot;&quot;&quot;')"/>
                </xsl:call-template>
                <!-- xsl:value-of select="$this/text()"/ @@ what was this? -->
            </xsl:if>
        </xsl:when>

        <!-- This second branch represents a node with subproperties defined in FHIR Spreadsheets -->
        <xsl:otherwise>

	    <xsl:if test="$subject">
		<xsl:value-of select="$subject"/><xsl:text> </xsl:text>
	    </xsl:if>
            <xsl:if test="$depth>0"><xsl:text>&#10;</xsl:text></xsl:if>

            <!-- If this is a type (non-internal) node, output the type -->
            <xsl:if test="$def.type != ''">
                <xsl:if test="$depth>0">
                    <xsl:call-template name="FhirIndent"> <xsl:with-param name="depth" select="$depth+1"/> </xsl:call-template>
                </xsl:if>
                <xsl:text>a fhir:</xsl:text>
                <xsl:choose>
		    <xsl:when test="f:modifierExtension">
			<!-- <Resource>:modified_<Property>  -->
			<xsl:value-of select="concat('modified_', $def.type)"/>
		    </xsl:when>
		    <xsl:otherwise><xsl:value-of select="$def.type"/></xsl:otherwise>
                </xsl:choose>
                <xsl:text>;&#10;</xsl:text>
            </xsl:if>

            <xsl:for-each select="f:extension|f:modifierExtension">
		<xsl:call-template name="extension">
		    <xsl:with-param name="depth" select="$depth"/>
		    <xsl:with-param name="this" select="."/>
		    <xsl:with-param name="doc" select="$doc"/>
		</xsl:call-template>
            </xsl:for-each>             
            <!-- Iterate over defined subproperties, making a recursive application of FhirElement -->
            <xsl:for-each select="$def.subs">

                <xsl:variable name="last_property_p">
                    <xsl:choose>
                        <xsl:when test="position() = last()"><xsl:value-of select="true()"/></xsl:when>
                        <xsl:otherwise><xsl:value-of select="false()"/></xsl:otherwise>
                    </xsl:choose>
                </xsl:variable>

                <xsl:variable name="sub" select="."/>
                <xsl:variable name="predicate" select="./predicate"/>
                <xsl:variable name="fhir_path" select="./fhir_path"/>
                <xsl:variable name="type" select="./type"/>
                <xsl:variable name="xpath" select="substring-after(./relative_xpath, ':')"/>
                <!--searching on  <xsl:value-of select="$predicate"/> via <xsl:value-of select="$xpath"/>-->

                <!-- for a given property, look for its occurence(s) in instance data -->
                <xsl:for-each select="$this/*[name()=$xpath]"> <!-- include contained arcs -->

                    <xsl:variable name="last_instance_p">
                        <xsl:choose>
                            <xsl:when test="position() = last()"><xsl:value-of select="true()"/></xsl:when>
                            <xsl:otherwise><xsl:value-of select="false()"/></xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>


                    <xsl:call-template name="FhirIndent"><xsl:with-param name="depth" select="$depth+1"/></xsl:call-template>
                    <xsl:choose>
			<xsl:when test="f:modifierExtension">
			    <!-- <Resource>:modified_<Property>  -->
                            <xsl:value-of select="concat(substring-before($predicate, ':'),
                                                  ':modified_',
                                                  substring-after($predicate, ':'))"/>
			</xsl:when>
			<xsl:when test="name()='contained'"> <!-- include contained arcs -->
			    <xsl:text>fhir:contained</xsl:text>
			</xsl:when>
			<xsl:otherwise><xsl:value-of select="$predicate"/></xsl:otherwise>
                    </xsl:choose>
                    <xsl:text> </xsl:text> 
                    <xsl:variable name="subcontext">
                        <xsl:choose>
                            <xsl:when test="$type != ''">
                                <xsl:value-of select="$type"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="$fhir_path"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="name()='contained'">
                        <!-- Reference contained elements by id: -->
                        <xsl:for-each select="*">
                          <xsl:if test="$contained = 'ref'">
                            <xsl:value-of select="concat('&lt;', $doc, '#', f:id/@value, '&gt;')"/>
                          </xsl:if>
                          <xsl:if test="$contained = 'inline'">
                            <xsl:text>[</xsl:text>
                            <xsl:call-template name="FhirElement">
                              <xsl:with-param name="depth" select="$depth+1"/>
                              <xsl:with-param name="this" select="."/>
                              <xsl:with-param name="context" select="name()"/>
                              <!--xsl:with-param name="subject" select="concat('&lt;', $doc, '#', @id, '&gt;')"/ -->
	                            <xsl:with-param name="doc" select="$doc"/>
                            </xsl:call-template>
                            <xsl:call-template name="FhirIndent"> <xsl:with-param name="depth" select="$depth+1"/> </xsl:call-template>
                            <xsl:text>]</xsl:text>
                          </xsl:if>
                          <xsl:choose>
                            <xsl:when test="following-sibling::*">
                              <xsl:text>,</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text>;&#10;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:for-each>
                      </xsl:when>

                        <!-- perform the mappings to xsd types per
                             http://www.hl7.org/implement/standards/fhir/datatypes.html#string -->
                        <xsl:when test="$subcontext='boolean' and not(name(..)='modifierExtension')">
                            <xsl:call-template name="LeafNodeEOL">
                                <xsl:with-param name="value" select="@value"/>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:when test="$subcontext='integer' and not(name(..)='modifierExtension')">
                            <xsl:call-template name="LeafNodeEOL">
                                <xsl:with-param name="value" select="@value"/>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:when test="($subcontext='decimal' or $subcontext='boolean') and not(name(..)='modifierExtension')">
                          <xsl:variable name="lexicalValue">
                            <xsl:choose>
                              <xsl:when test="contains(@value,'.')">
                                <xsl:value-of select="@value"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="concat(@value, '.0')"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:variable>
                            <xsl:call-template name="LeafNodeEOL">
                                <xsl:with-param name="value" select="$lexicalValue"/>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:when test="$subcontext='base64Binary' and not(name(..)='modifierExtension')">
                            <xsl:call-template name="LeafNodeEOL">
                                <xsl:with-param name="value" select="concat('&quot;', @value, '&quot;^^xsd:base64Binary')"/>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:when test="$subcontext='instant' and not(name(..)='modifierExtension')">
                            <xsl:call-template name="LeafNodeEOL">
                                <xsl:with-param name="value" select="concat('&quot;', @value, '&quot;^^xsd:dateTime')"/>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:when test="$subcontext='string' and not(name(..)='modifierExtension')">
                            <xsl:call-template name="LeafNodeEOL">
                                <xsl:with-param name="value" select="concat('&quot;', @value, '&quot;')"/>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:when test="$subcontext='uri' and not(name(..)='modifierExtension')">
                            <xsl:call-template name="LeafNodeEOL">
                                <xsl:with-param name="value" select="concat('&lt;', @value, '&gt;')"/>
                            </xsl:call-template>
                        </xsl:when>
                        <!-- @@ date and dateTime get mapped to unions -->
                        <!-- <xsl:when test="$subcontext='dateTime' and not(name(..)='modifierExtension')"> -->
                        <!--     <xsl:text>"</xsl:text> -->
                        <!--     <xsl:value-of select="@value"/> -->
                        <!--     <xsl:text>"^^xsd:dateTime;&#10;</xsl:text> -->
                        <!-- </xsl:when> -->

                        <!-- a code is a string per
                             http://www.hl7.org/implement/standards/fhir/datatypes.html#code -->
                        <xsl:when test="($subcontext='code' or $subcontext='id') and not(name(..)='modifierExtension')">
                            <xsl:call-template name="LeafNodeEOL">
                                <xsl:with-param name="value" select="concat('&quot;', @value, '&quot;^^fhir:', $subcontext)"/>
                            </xsl:call-template>
                        </xsl:when>
                        <xsl:when test="$reference = 'ref' and $type='Reference'">
			    <xsl:choose>
				<xsl:when test="contains(f:reference/@value, '#')">
				    <xsl:value-of select="concat('&lt;', $doc, f:reference/@value, '&gt;')"/>
				</xsl:when>
				<xsl:otherwise>
				    <xsl:value-of select="concat('&lt;', f:reference/@value, '&gt;')"/>
				</xsl:otherwise>
			    </xsl:choose>
                            <!-- <xsl:text>&lt;</xsl:text> -->
                            <!-- <xsl:value-of select="f:reference/@value"/> -->
                            <!-- <xsl:text>&gt;;&#10;</xsl:text> -->
                            <xsl:text>;&#10;</xsl:text>
                            <!-- <xsl:text># skip a resource of type Resource on path: </xsl:text> -->
                            <!-- <xsl:value-of select="$fhir_path"/> -->
                            <!-- <xsl:text>  xpath: </xsl:text> -->
                            <!-- <xsl:value-of select="$xpath"/> -->
                            <!-- <xsl:text>?&#10;</xsl:text> -->
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:text>[</xsl:text>
                            <xsl:call-template name="FhirElement">
                                <xsl:with-param name="depth" select="$depth+1"/>
                                <xsl:with-param name="this" select="."/>
                                <xsl:with-param name="context" select="$subcontext"/>
				<xsl:with-param name="doc" select="$doc"/>
                            </xsl:call-template>
                            <xsl:call-template name="FhirIndent"><xsl:with-param name="depth" select="$depth+1"/></xsl:call-template>
			    
                            <!-- This test only works because FHIR's examples are all serialized with propertiese
                                 in the same order as in the defining spreadsheets.  It will sometimes think a
                                 terminal entry is non-terminal, e.g. if the last property has no instance. -->
                            <xsl:choose>
                                <xsl:when test="$last_property_p='true' and $last_instance_p='true'">
                                    <xsl:text>]&#10;</xsl:text> 
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:text>];&#10;</xsl:text> 
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:otherwise>
                    </xsl:choose>

                </xsl:for-each>
            </xsl:for-each>
            <xsl:if test="$depth=0"><xsl:text>.&#10;</xsl:text></xsl:if>
        </xsl:otherwise>
    </xsl:choose>
</xsl:template>
<xsl:template name="copy-element" match="*" mode="copy">
    <xsl:text>&lt;</xsl:text><xsl:value-of select="name()"/>
    <xsl:apply-templates select="@*" mode="copy-attr"/>
    <xsl:choose>
	<xsl:when test="count(node()) > 0">
	    <xsl:text>&gt;</xsl:text>
	    <xsl:apply-templates select="node()" mode="copy" />
	    <xsl:text>&lt;/</xsl:text><xsl:value-of select="name()"/><xsl:text>&gt;</xsl:text>
	</xsl:when>
	<xsl:otherwise>
	    <xsl:text>/&gt;</xsl:text>
	</xsl:otherwise>
    </xsl:choose>
</xsl:template>

<xsl:template name="copy-attr" match="@*" mode="copy-attr">
    <xsl:text> </xsl:text><xsl:value-of select="name()"/><xsl:text>=</xsl:text><xsl:text>"</xsl:text><xsl:value-of select="."/><xsl:text>"</xsl:text>
</xsl:template>

<xsl:template name="indent">
    <xsl:if test="preceding-sibling::text()[1]">
	<xsl:choose>
	    <xsl:when test="contains(preceding-sibling::text()[1], '&#10;')">
		<xsl:value-of select="substring-after(preceding-sibling::text()[1], '&#10;')"/>
	    </xsl:when>
	    <xsl:otherwise>
		<xsl:value-of select="preceding-sibling::text()[1]"/>
	    </xsl:otherwise>
	</xsl:choose>
    </xsl:if>
</xsl:template>

<!-- prefix for this resource plus library types. -->
<xsl:template name="addPrefixes">
    <xsl:param name="name"/>
    <div>
	<pre class="machine" style="font-size:small">@prefix <xsl:value-of select="$name"/>: &lt;http://hl7/org/fhir/<xsl:value-of select="$name"/>#&gt; .
@prefix fhir: &lt;http://hl7/org/fhir/&gt; .
@prefix xhtml: &lt;http://www.w3.org/1999/xhtml&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema&gt; .
</pre>
    </div>
</xsl:template>

<!-- optionally write a literal value directly or as a bnode with fhir:value -->
<xsl:template name="LeafNode">
  <xsl:param name="value"/>
  <xsl:if test="$literals = 'nest'">
    <xsl:text>[ fhir:value </xsl:text>
  </xsl:if>
  <xsl:value-of select="$value"/> <!-- @@ need to backslashify -->
  <xsl:if test="$literals = 'nest'">
    <xsl:text> ]</xsl:text>
  </xsl:if>
</xsl:template>

<!-- convenience macro to do add EOL -->
<xsl:template name="LeafNodeEOL">
  <xsl:param name="value"/>
  <xsl:call-template name="LeafNode">
    <xsl:with-param name="value" select="$value"/>
  </xsl:call-template>
  <xsl:text>;&#10;</xsl:text>
</xsl:template>

</xsl:stylesheet>
